package com.flipkart.batching.flatbuffer;// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Batch extends Table {
  public static Batch getRootAsBatch(ByteBuffer _bb) { return getRootAsBatch(_bb, new Batch()); }
  public static Batch getRootAsBatch(ByteBuffer _bb, Batch obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Batch __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long maxBatchSize() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public long maxTimeout() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public Data dataCollection(int j) { return dataCollection(new Data(), j); }
  public Data dataCollection(Data obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int dataCollectionLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createBatch(FlatBufferBuilder builder,
      long maxBatchSize,
      long maxTimeout,
      int dataCollectionOffset) {
    builder.startObject(3);
    Batch.addMaxTimeout(builder, maxTimeout);
    Batch.addMaxBatchSize(builder, maxBatchSize);
    Batch.addDataCollection(builder, dataCollectionOffset);
    return Batch.endBatch(builder);
  }

  public static void startBatch(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addMaxBatchSize(FlatBufferBuilder builder, long maxBatchSize) { builder.addLong(0, maxBatchSize, 0); }
  public static void addMaxTimeout(FlatBufferBuilder builder, long maxTimeout) { builder.addLong(1, maxTimeout, 0); }
  public static void addDataCollection(FlatBufferBuilder builder, int dataCollectionOffset) { builder.addOffset(2, dataCollectionOffset, 0); }
  public static int createDataCollectionVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDataCollectionVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endBatch(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

